$schema: "http://json-schema.org/draft-04/schema#"
#id: 'https://github.com/dosumis/dead_simple_owl_design_patterns/edit/master/spec/DOSDP_spec.json' # Use Purl?
title: DOSDP
type: object
additionalProperties: False


definitions:

  printf_annotation:
    type: object
    additionalProperties: False
    required: [annotationProperty, text, vars]
    properties:
      annotationProperty:
        description: > 
         A string corresponding to the rdfs:label
         of an owl annotation property. If the annotation property has no label,
         the shortForm ID should be used. The annotation property must be listed
         in the annotation property dictionary.'
        type: string
      annotations:
        items: { $ref: "#/definitions/annotation" } 
        type: array
      text:
        description: A print format string.
        type: string
      vars:
        description: >
         An ordered list of variables for substitution into the accompanying
         print format string. Each entry must correspond to the name of a variable
         specified in either the 'vars' field or the data_var field of the pattern.
         Where an OWL entity is specified, the label for the OWL entity should be
         used in the substitution.
        items: {type: string}
        type: array
        
  list_annotation:
    type: object
    additionalProperties: False
    required: [annotationProperty, value]
    properties:
      annotationProperty:
        description: > 
         A string corresponding to the rdfs:label
         of an owl annotation property. If the annotation property has no label,
         the shortForm ID should be used. The annotation property must be listed
         in the annotation property dictionary.'
        type: string
      value:
        description: >
         A single list variable (list_var or data_list_var).  Each item in this list 
         should be used to generate a separate annotation axiom.
        type: string
  annotations:
   oneOf: 
     - { $ref: "#/definitions/printf_annotation" }
     - { $ref: "#/definitions/list_annotation" }

  printf_owl:
    type: object
    additionalProperties: False
    required: [axiom_type, text, vars]
    properties:
      annotations:
        items: {$ref: '#/definitions/annotations'}
        type: array
      axiom_type:
        description: > 
         OWL axiom type expressed as manchester syntax: equivalentTo,
         subClassOf, disjointWith. GCI  - for general class inclusion axioms, is
         also valid (although missing from manchester syntax.) This specifies the
         axiom type to be generated from the text following substitution.'
        enum: [equivalentTo, subClassOf, disjointWith, GCI]
        type: string
      text: 
        type: string
        description: > 
         A print format string in OWL Manchester syntax. Each entry
         must correspond to an entry in o the name of a var in the var field of the
         pattern. Entries in single quotes must correspond to the labels of entries
         in owl_entity dictionaries (classes, relations, dataProperties)    
      vars:
        description: >
         An ordered list of variables for substitution into the accompanying
         print format string. Each entry must correspond to the name of a variable
         specified in either the 'vars' field or the data_var field of the pattern.
      items: {type: string}
      type: array

  printf_owl_convenience:
    type: object
    additionalProperties: False
    required: [text, vars]
    properties:
      annotations:
        items: {$ref: '#/definitions/annotations'}
        type: array
      text: 
        type: string
        description: >
         A print format string in OWL Manchester syntax. Each entry
         must correspond to an entry in o the name of a var in the var field of the
         pattern. Entries in single quotes must correspond to the labels of entries
         in owl_entity dictionaries (classes, relations, dataProperties)
      vars:
        description: >
         An ordered list of variables for substitution into the accompanying
         print format string. Each entry must correspond to the name of a variable
          specified in either the 'vars' field or the data_var field of the pattern.
        items: {type: string}
        type: array

  # TODO - split into separate schema file
  printf_annotation_obo: 
    type: object
    additionalProperties: False
    required: [text, vars]
    properties:
      annotations:
        items: { $ref: "#/definitions/annotations" } 
        type: array
      xrefs:
        description: > 
         Takes the name of a single data_list_var specifying a list of database 
         cross references.
        type: string
        mapping: "oboInOwl:hasDbXref" 
      text:
        description: A print format string.
        type: string
      vars:
        description: >
         An ordered list of variables for substitution into the accompanying
         print format string. Each entry must correspond to the name of a variable
         specified in either the 'vars' field or the data_var field of the pattern.
         Where an OWL entity is specified, the label for the OWL entity should be
         used in the substitution.
        items: {type: string}
        type: array
        
  list_annotation_obo:
    type: object
    additionalProperties: False
    required: [value]
    properties:
      value:
        description: >
         A single list variable (list_var or data_list_var).  Each item in this list 
         should be used to generate a separate annotation axiom.
        type: string
      xrefs:
        description: > 
         Takes the name of a single data_list_var specifying a list of database 
         cross references. Use of this field should add the same xref set to all 
         annotation axioms generated.
        type: string
        mapping: "oboInOwl:hasDbXref"          
        
        


properties:
  pattern_name:
    type: string  # possible to specifiy ASCII?
    description: >
      The name of the pattern.  This must be an ASCII string with
      no spaces. The only special characters allowed are '_' and '-'.
      By convention, this is used as the file name of the
      pattern - with an appropriate extension.
      
  base_IRI:  # not rqd, give JSON-LD base.
    type: string # how to spec IRI?
    description: "Specifies the base IRI to be used to generate new classes."

  description:
    type: string # specify UTF-8 string?
    description: "A free text description of the pattern.  Must be UTF-8 encoded."

  readable_identifiers:
    type: array
    items:  { type: string }
    description: "A list of annotation properties used as naming fields, in order of preference."

#### owl_entity Dictionaries

  classes:
    type: object
    description: "A dictionary of OWL classes. key :label; value : short form id"
  objectProperties:
    type: object
    description: "A dictionary of OWL object properties. key : label; value : short form id"
  relations:
    # Just an alternative name for the ObjectProperties dict
    type: object
    description: "A dictionary of OWL object properties. key : label; value : short form id"
  dataProperties:
    type: object
    description: "A dictionary of OWL data properties key : label; value : short form id"
  annotationProperties:
    type: object
    description: "A dictionary of OWL annotation properties key : label; value : short form id"

# Var types

  vars:
    type: object
    description: >
     A dictionary of variables ranging over OWL classes.  
     Key = variable name, value = variable range as manchester syntax string.
     
  list_vars:
    type: object
    description: >
     A dictionary of variables refering to lists of owl classes.
     Key = variable name, value = variable range of items in list specified as a valid OWL
     data-type.
  
  data_vars:
    type: object
    description: >
     A dictionary of variables ranging over OWL data-types.
     Key = variable name, value = variable range specified as a valid OWL
     data-type.
     
  data_list_vars:
    description: >
        A dictionary of variables rrefering to lists of some specified OWL data-types.
        Key = variable name, value = variable range of all items in list, 
        specified as a valid OWL data-type.

  annotations:
    items: { $ref: '#/definitions/printf_annotation'}
    type: array
    
  logical_axioms:
    items: { $ref: '#/definitions/printf_owl'}
    type: array

# logical convenience fields.  
# Where only one of any OWL axiom type is present, these convenience fields may be used.

  equivalentTo:
    { $ref: '#/definitions/printf_owl_convenience' }

  subClassOf:
    { $ref: '#/definitions/printf_owl_convenience' }

  GCI:
    { $ref: '#/definitions/printf_owl_convenience' }
 
  disjointWith: 
    { $ref: '#/definitions/printf_owl_convenience' }

# OBO fields - TODO split to a separate file with import statement.

  name:
    { $ref: '#/definitions/printf_annotation_obo', mapping: "rdfs:label" }
  comment:
    { $ref: '#/definitions/printf_annotation_obo', mapping: "rdfs:comment" }
  def:
    { $ref: '#/definitions/printf_annotation_obo', mapping: "obo:IAO_0000115" }
  
  # TODO: make all these into list_annotations 
  exact_synonym:
    $ref: '#/definitions/list_annotation_obo' }
    mapping: "oboInOwl:hasExactSynonym"
  narrow_synonym:
    $ref: '#/definitions/list_annotation_obo' }
    mapping: "oboInOwl:hasNarrowSynonym"
  related_synonym:
    $ref: '#/definitions/list_annotation_obo' }
    mapping: "oboInOwl:hasRelatedSynonym"
  broad_synonym:
    $ref: '#/definitions/list_annotation_obo' }
    mapping: "oboInOwl:hasBroadSynonym"
  xref:
    $ref: '#/definitions/list_annotation_obo' }
    mapping: "oboInOwl:hasDbXref"

# instance graph spec - TODO be split to a separate file

  instance_graph:
    type: object
    additionalProperties: False
    required: [nodes, edges]
    properties:
      nodes:
        description: > 
                       Key = name of individual within this pattern doc
                       Value = Type of individual specified using either 
                       the quoted name of a class in the class dictionary of this pattern
                       or a var name.  This field does not support typing via 
                       anonymous class expressions
        type: object
      edges:
        type: object
        additionalProperties: False
        required: [edge]
        properties:
          edge:
            description: >
                          A triple specified as an ordered array with 3 elements
                          [subject, rel, object]
                            * rel must be the quoted name of a relation from the relations
                              (object property) dictionary.
                            * subject and object must be the name of an individual
                              specified in the nodes field.
            type: array
            items: { type: string }
            minItems: 3
            maxItems: 3
          annotations:
            type: array 
            items: { $ref: '#/definitions/annotation' }
          not:
            description: "Optional field for negated OPAs"
            type: boolean

 




