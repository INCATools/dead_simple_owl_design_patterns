{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dead simple owl design pattern (DOS-DP) Documentation For project homepage visit dos-dp . Overview Specification Schema (raw) Validation Documentation","title":"Getting started"},{"location":"#dead-simple-owl-design-pattern-dos-dp-documentation","text":"For project homepage visit dos-dp . Overview Specification Schema (raw) Validation Documentation","title":"Dead simple owl design pattern (DOS-DP) Documentation"},{"location":"cite/","text":"How to cite DOS-DP Please cite Dead Simple OWL Design Patterns David Osumi-Sutherland, Melanie Courtot, James P. Balhoff and Christopher Mungall Journal of Biomedical Semantics 2017 8:18 DOI:10.1186/s13326-017-0126-0","title":"Cite"},{"location":"cite/#how-to-cite-dos-dp","text":"Please cite Dead Simple OWL Design Patterns David Osumi-Sutherland, Melanie Courtot, James P. Balhoff and Christopher Mungall Journal of Biomedical Semantics 2017 8:18 DOI:10.1186/s13326-017-0126-0","title":"How to cite DOS-DP"},{"location":"document/","text":"DOSDP Documentation Generation DODSP provides automatic documentation generation service for both pattern files and the dosdp schema itself. Pattern Documentation DOSDP provides several CLI interfaces for automatic pattern generation. $ dosdp document -i pattern.yaml $ dosdp document -i pattern.yaml -o pattern.md $ dosdp document -i pattern.yaml -o 'output folder' $ dosdp document -i 'pattern folder' -o 'output folder' $ dosdp document -i pattern.yaml -d 'sample data folder' -o pattern.md $ dosdp document -i 'pattern folder' -d 'sample data folder' -o 'output folder' A sample dosdp pattern and its auto generated documentation can be seen in the cell ontology. An additional overview document generated to present a summary of the patterns, if a directory is provided as input. If the optional sample data folder parameter is provided, a data preview is generated in both the pattern and overview documents. To achieve this, the pattern file name and the data file must match. DOSDP Schema Documentation With each version release, DOSDP generates and publishes a schema documentation. $ dosdp document --schema $ dosdp document --schema -o <schema.md> Generates md formatted documentation for the schema exists in the dosdp package. An output document location can be optionally identified to specify documentation location or current folder (os current working directory) is used by default.","title":"Documentation Generation"},{"location":"document/#dosdp-documentation-generation","text":"DODSP provides automatic documentation generation service for both pattern files and the dosdp schema itself.","title":"DOSDP Documentation Generation"},{"location":"document/#pattern-documentation","text":"DOSDP provides several CLI interfaces for automatic pattern generation. $ dosdp document -i pattern.yaml $ dosdp document -i pattern.yaml -o pattern.md $ dosdp document -i pattern.yaml -o 'output folder' $ dosdp document -i 'pattern folder' -o 'output folder' $ dosdp document -i pattern.yaml -d 'sample data folder' -o pattern.md $ dosdp document -i 'pattern folder' -d 'sample data folder' -o 'output folder' A sample dosdp pattern and its auto generated documentation can be seen in the cell ontology. An additional overview document generated to present a summary of the patterns, if a directory is provided as input. If the optional sample data folder parameter is provided, a data preview is generated in both the pattern and overview documents. To achieve this, the pattern file name and the data file must match.","title":"Pattern Documentation"},{"location":"document/#dosdp-schema-documentation","text":"With each version release, DOSDP generates and publishes a schema documentation. $ dosdp document --schema $ dosdp document --schema -o <schema.md> Generates md formatted documentation for the schema exists in the dosdp package. An output document location can be optionally identified to specify documentation location or current folder (os current working directory) is used by default.","title":"DOSDP Schema Documentation"},{"location":"dosdp_schema/","text":"DOSDP Properties OWL Entity Dictionaries Var Types Var Munging Axioms Logical Convenience Fields OBO fields Instance Graph Spec Properties pattern_name (string) : The name of the pattern. This must be an ASCII string with no spaces. The only special characters allowed are '_' and '-'. By convention, this is used as the file name of the pattern - with an appropriate extension. pattern_iri (string) : A global identifier for the pattern. This can be a full IRI or a CURIE, using the same prefix mappings as other CURIEs in the pattern. base_IRI (string) : Specifies the base IRI to be used to generate new classes. contributors (list) : A list of authors of a pattern. Each author must be specified using a URL or Curie - we recommend ORCID. We do not recommend that this list is instantiated in terms generated using a pattern, but where it is it should be instantiated as a set of annotation axioms using dc:contributor. description (string) : A free text description of the pattern. Must be UTF-8 encoded. examples (list) : A list of example terms implementing this pattern. status (string) : Implementation status of pattern. Must be one of: ['development', 'published'] . tags (list) : A list of strings used to tag a pattern for the purposes of arbitrary, cross-cutting grouping of patterns. readable_identifiers (list) : A list of annotation properties used as naming fields, in order of preference. OWL Entity Dictionaries classes (object) : A dictionary of OWL classes. key :label; value : short form id. objectProperties (object) : A dictionary of OWL object properties. key : label; value : short form id. relations (object) : A dictionary of OWL object properties. key : label; value : short form id. dataProperties (object) : A dictionary of OWL data properties key : label; value : short form id. annotationProperties (object) : A dictionary of OWL annotation properties key : label; value : short form id. Var Types vars (object) : A dictionary of variables ranging over OWL classes. Key = variable name, value = variable range as manchester syntax string. list_vars (object) : A dictionary of variables refering to lists of owl classes. Key = variable name, value = variable range of items in list specified as a valid OWL data-type. data_vars (object) : A dictionary of variables ranging over OWL data-types. Key = variable name, value = variable range specified as a valid OWL data-type. data_list_vars (object) : A dictionary of variables rrefering to lists of some specified OWL data-types. Key = variable name, value = variable range of all items in list, specified as a valid OWL data-type. internal_vars (list) : List of internal variable construction definitions. Given function is applied to the given multi value input and the result is defined as a new internal variable. var_name (string) : Name of the internal variable to be defined. Expected naming pattern is ^[A-Za-z_][A-Za-z0-9_]*$. input (string) : A list_vars or data_list_vars variable to which the given function applied. apply : Use one of the followings: join sep (string) : A string used as value separator while joining list type (multi value) variables. regex_sub (object) : Cannot contain additional properties. in (string) : name of input var. out (string) : Name of output var. If input var specified an OWL entity then readable identifier is used as input to substitution. match (string) : perl style regex match. sub (string) : perl style regex sub. May include backreferences. Var Munging substitutions (list) in (string) : name of input var. out (string) : Name of output var. If input var specified an OWL entity then readable identifier is used as input to substitution. match (string) : perl style regex match. sub (string) : perl style regex sub. May include backreferences. Axioms annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... logical_axioms (list) axiom_type (string) : OWL axiom type expressed as manchester syntax: equivalentTo, subClassOf, disjointWith. GCI - for general class inclusion axioms, is also valid (although missing from manchester syntax.) This specifies the axiom type to be generated from the text following substitution.'. Must be one of: ['equivalentTo', 'subClassOf', 'disjointWith', 'GCI'] . text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... Logical Convenience Fields Where only one of any OWL axiom type is present, these convenience fields may be used. equivalentTo : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... subClassOf : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... GCI : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... disjointWith : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... OBO fields name : Mapped to rdfs:label . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... comment : Mapped to rdfs:comment . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... def : Mapped to obo:IAO_0000115 . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... namespace : Mapped to oboInOwl:hasOBONamespace . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... exact_synonym : Mapped to oboInOwl:hasExactSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. narrow_synonym : Mapped to oboInOwl:hasNarrowSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. related_synonym : Mapped to oboInOwl:hasRelatedSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. broad_synonym : Mapped to oboInOwl:hasBroadSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. xref : Mapped to oboInOwl:hasDbXref . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. generated_synonyms (list) : An OBO convenience field to allow the specification of exact synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_narrow_synonyms (list) : An OBO convenience field to allow the specification of narrow synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_broad_synonyms (list) : An OBO convenience field to allow the specification of broad synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_related_synonyms (list) : An OBO convenience field to allow the specification of related synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... Instance Graph Spec instance_graph (object) : Cannot contain additional properties. nodes (object) : Key = name of individual within this pattern doc Value = Type of individual specified using either the quoted name of a class in the class dictionary of this pattern or a var name. This field does not support typing via anonymous class expressions. edges (list) edge (list) : A triple specified as an ordered array with 3 elements [subject, rel, object] * rel must be the quoted name of a relation from the relations (object property) dictionary. * subject and object must be the name of an individual specified in the nodes field. not (boolean) : Optional field for negated OPAs. annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ...","title":"Schema Specification"},{"location":"dosdp_schema/#dosdp","text":"Properties OWL Entity Dictionaries Var Types Var Munging Axioms Logical Convenience Fields OBO fields Instance Graph Spec","title":"DOSDP"},{"location":"dosdp_schema/#properties","text":"pattern_name (string) : The name of the pattern. This must be an ASCII string with no spaces. The only special characters allowed are '_' and '-'. By convention, this is used as the file name of the pattern - with an appropriate extension. pattern_iri (string) : A global identifier for the pattern. This can be a full IRI or a CURIE, using the same prefix mappings as other CURIEs in the pattern. base_IRI (string) : Specifies the base IRI to be used to generate new classes. contributors (list) : A list of authors of a pattern. Each author must be specified using a URL or Curie - we recommend ORCID. We do not recommend that this list is instantiated in terms generated using a pattern, but where it is it should be instantiated as a set of annotation axioms using dc:contributor. description (string) : A free text description of the pattern. Must be UTF-8 encoded. examples (list) : A list of example terms implementing this pattern. status (string) : Implementation status of pattern. Must be one of: ['development', 'published'] . tags (list) : A list of strings used to tag a pattern for the purposes of arbitrary, cross-cutting grouping of patterns. readable_identifiers (list) : A list of annotation properties used as naming fields, in order of preference.","title":"Properties"},{"location":"dosdp_schema/#owl-entity-dictionaries","text":"classes (object) : A dictionary of OWL classes. key :label; value : short form id. objectProperties (object) : A dictionary of OWL object properties. key : label; value : short form id. relations (object) : A dictionary of OWL object properties. key : label; value : short form id. dataProperties (object) : A dictionary of OWL data properties key : label; value : short form id. annotationProperties (object) : A dictionary of OWL annotation properties key : label; value : short form id.","title":"OWL Entity Dictionaries"},{"location":"dosdp_schema/#var-types","text":"vars (object) : A dictionary of variables ranging over OWL classes. Key = variable name, value = variable range as manchester syntax string. list_vars (object) : A dictionary of variables refering to lists of owl classes. Key = variable name, value = variable range of items in list specified as a valid OWL data-type. data_vars (object) : A dictionary of variables ranging over OWL data-types. Key = variable name, value = variable range specified as a valid OWL data-type. data_list_vars (object) : A dictionary of variables rrefering to lists of some specified OWL data-types. Key = variable name, value = variable range of all items in list, specified as a valid OWL data-type. internal_vars (list) : List of internal variable construction definitions. Given function is applied to the given multi value input and the result is defined as a new internal variable. var_name (string) : Name of the internal variable to be defined. Expected naming pattern is ^[A-Za-z_][A-Za-z0-9_]*$. input (string) : A list_vars or data_list_vars variable to which the given function applied. apply : Use one of the followings: join sep (string) : A string used as value separator while joining list type (multi value) variables. regex_sub (object) : Cannot contain additional properties. in (string) : name of input var. out (string) : Name of output var. If input var specified an OWL entity then readable identifier is used as input to substitution. match (string) : perl style regex match. sub (string) : perl style regex sub. May include backreferences.","title":"Var Types"},{"location":"dosdp_schema/#var-munging","text":"substitutions (list) in (string) : name of input var. out (string) : Name of output var. If input var specified an OWL entity then readable identifier is used as input to substitution. match (string) : perl style regex match. sub (string) : perl style regex sub. May include backreferences.","title":"Var Munging"},{"location":"dosdp_schema/#axioms","text":"annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... logical_axioms (list) axiom_type (string) : OWL axiom type expressed as manchester syntax: equivalentTo, subClassOf, disjointWith. GCI - for general class inclusion axioms, is also valid (although missing from manchester syntax.) This specifies the axiom type to be generated from the text following substitution.'. Must be one of: ['equivalentTo', 'subClassOf', 'disjointWith', 'GCI'] . text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ...","title":"Axioms"},{"location":"dosdp_schema/#logical-convenience-fields","text":"Where only one of any OWL axiom type is present, these convenience fields may be used. equivalentTo : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... subClassOf : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... GCI : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... disjointWith : text (string) : A print format string in OWL Manchester syntax. Each entry must correspond to an entry in o the name of a var in the var field of the pattern. Entries in single quotes must correspond to the labels of entries in owl_entity dictionaries (classes, relations, dataProperties). vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ...","title":"Logical Convenience Fields"},{"location":"dosdp_schema/#obo-fields","text":"name : Mapped to rdfs:label . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... comment : Mapped to rdfs:comment . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... def : Mapped to obo:IAO_0000115 . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... namespace : Mapped to oboInOwl:hasOBONamespace . xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... exact_synonym : Mapped to oboInOwl:hasExactSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. narrow_synonym : Mapped to oboInOwl:hasNarrowSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. related_synonym : Mapped to oboInOwl:hasRelatedSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. broad_synonym : Mapped to oboInOwl:hasBroadSynonym . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. xref : Mapped to oboInOwl:hasDbXref . value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. Use of this field should add the same xref set to all annotation axioms generated. generated_synonyms (list) : An OBO convenience field to allow the specification of exact synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_narrow_synonyms (list) : An OBO convenience field to allow the specification of narrow synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_broad_synonyms (list) : An OBO convenience field to allow the specification of broad synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ... generated_related_synonyms (list) : An OBO convenience field to allow the specification of related synonyms generated by interpolation of OWL entity names into printf text. Each entry may be annotated. xrefs (string) : Mapped to oboInOwl:hasDbXref . Takes the name of a single data_list_var specifying a list of database cross references. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ...","title":"OBO fields"},{"location":"dosdp_schema/#instance-graph-spec","text":"instance_graph (object) : Cannot contain additional properties. nodes (object) : Key = name of individual within this pattern doc Value = Type of individual specified using either the quoted name of a class in the class dictionary of this pattern or a var name. This field does not support typing via anonymous class expressions. edges (list) edge (list) : A triple specified as an ordered array with 3 elements [subject, rel, object] * rel must be the quoted name of a relation from the relations (object property) dictionary. * subject and object must be the name of an individual specified in the nodes field. not (boolean) : Optional field for negated OPAs. annotations (list) Use one of the followings: annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars' field or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. An empty var list can be specified simply by leaving this field out. multi_clause sep (string) : A string used as clause separator while aggregating multiple clauses. clauses (list) : List of optional clauses. Rules for optional clauses: list_vars may be passed, but only one list_var per multi-clause printf is permitted. If an empty list_var is passed, the clause, and any subclauses, are omitted. If list_var with length n is passed, the clause is repeated n times, using the specified separtor to join clauses. There is no effect on the number of subclauses in this case. text (string) : A print format string. vars (list) : An ordered list of variables for substitution into the accompanying print format string. Each entry must correspond to the name of a variable specified in either the 'vars', 'internal_vars' or the data_var field of the pattern. Where an OWL entity is specified, the label for the OWL entity should be used in the substitution. SPECIAL RULES FOR multi_clause_printf context: In this context, list_vars are permitted. If an list is empty, the clause and any subclauses must not be added. for lists of length > 1, mutiple clauses should be added, using the specified separator. sub_clauses (list) : List of clauses that depends on this clause. If parent clause cannot be printed, all sub_clauses are also discarded. ... annotations (list) ... annotationProperty (string) : A string corresponding to the rdfs:label of an owl annotation property. If the annotation property has no label, the shortForm ID should be used. The annotation property must be listed in the annotation property dictionary.'. value (string) : A single list variable (list_var or data_list_var). Each item in this list should be used to generate a separate annotation axiom. annotationProperty (string) : A string corresponding to a key in the annotation property dictionary. var (string) : The name of a variable specified in the 'vars' field. The IRI of the variable value will be the object of the annotation axiom. annotations (list) ...","title":"Instance Graph Spec"},{"location":"overview/","text":"Dead simple owl design pattern (DOS-DP) exchange format For details please see: Dead Simple OWL Design Patterns David Osumi-Sutherland, Melanie Courtot, James P. Balhoff and Christopher Mungall Journal of Biomedical Semantics 2017 8:18 DOI:10.1186/s13326-017-0126-0 Motivation The job of editing the GO and many other OBOish OWL ontologies increasingly involves specifying OWL design patterns. We need a simple, light-weight standard for specifying these design patterns that can then be used for generating documentation, generating new terms and retrofitting old ones. The solution must be readable and editable by anyone with a basic knowledge of OWL and the ability to read manchester syntax. It must also be easy to use programatically without the need for custom parsers - i.e. it should follow some existing data exchange standard. Human readability and editability requires that Manchester syntax be written using labels, but sustainability and consistency checking requires that the pattern record IDs. Approach Patterns are specified in the subset of YAML that can be converted to JSON. JSON format is the ideal exchange format for programatic consumption: It is already javascript; Standard libraries are available to convert it into datastructures in many languages;Developers are typically experienced at consuming it. But YAML is much easier than JSON for humans to edit (it can be difficult for human editors to keep curly braces and quotes balanced and to add commas correctly in JSON). YAML also has the great advantage over JSON of allowing comments to be embedded. Conversion between YAML and JSON is trivial All patterns contain dictionaries (hash lookups) that can be used to lookup up OWL shortform IDs from labels. OWL ShortFormIDs are assumed to be sufficient for entity resolution during usage of the pattern. Labels are assumed to be sufficient for entity resolution within a pattern. Variable interpolation into Manchester syntax and text is specified using printf format strings . Variable names are stored in associated lists. Variables are specified in a dictionary with variable name as key and value as range specified as a Manchester syntax expresssion. DOSDP Specification: JSON schema specification in YAML . The same specification rendered in mardown , with references resolved. This is generated from the original spec using the dosdp document command (see below for details). Setup pip install dosdp See https://pypi.org/project/dosdp/ Validator spec See validator documentation Documentation generation spec See documentation_generation Implementation The aim of this project is to specify a simple design pattern system that can easily be consumed, whatever your code base. This repository includes a simple Python validator (src/simple_pattern_tester.py). For implementation, we recommend dosdp-tools . Uses ENVO : envo patterns/ OBA : oba patterns/ draft environmental conditions ontology: ecto patterns/ Uberon : uberon patterns/ uPheno Mondo","title":"Overview"},{"location":"overview/#dead-simple-owl-design-pattern-dos-dp-exchange-format","text":"","title":"Dead simple owl design pattern (DOS-DP) exchange format"},{"location":"overview/#for-details-please-see","text":"Dead Simple OWL Design Patterns David Osumi-Sutherland, Melanie Courtot, James P. Balhoff and Christopher Mungall Journal of Biomedical Semantics 2017 8:18 DOI:10.1186/s13326-017-0126-0","title":"For details please see:"},{"location":"overview/#motivation","text":"The job of editing the GO and many other OBOish OWL ontologies increasingly involves specifying OWL design patterns. We need a simple, light-weight standard for specifying these design patterns that can then be used for generating documentation, generating new terms and retrofitting old ones. The solution must be readable and editable by anyone with a basic knowledge of OWL and the ability to read manchester syntax. It must also be easy to use programatically without the need for custom parsers - i.e. it should follow some existing data exchange standard. Human readability and editability requires that Manchester syntax be written using labels, but sustainability and consistency checking requires that the pattern record IDs.","title":"Motivation"},{"location":"overview/#approach","text":"Patterns are specified in the subset of YAML that can be converted to JSON. JSON format is the ideal exchange format for programatic consumption: It is already javascript; Standard libraries are available to convert it into datastructures in many languages;Developers are typically experienced at consuming it. But YAML is much easier than JSON for humans to edit (it can be difficult for human editors to keep curly braces and quotes balanced and to add commas correctly in JSON). YAML also has the great advantage over JSON of allowing comments to be embedded. Conversion between YAML and JSON is trivial All patterns contain dictionaries (hash lookups) that can be used to lookup up OWL shortform IDs from labels. OWL ShortFormIDs are assumed to be sufficient for entity resolution during usage of the pattern. Labels are assumed to be sufficient for entity resolution within a pattern. Variable interpolation into Manchester syntax and text is specified using printf format strings . Variable names are stored in associated lists. Variables are specified in a dictionary with variable name as key and value as range specified as a Manchester syntax expresssion.","title":"Approach"},{"location":"overview/#dosdp-specification","text":"JSON schema specification in YAML . The same specification rendered in mardown , with references resolved. This is generated from the original spec using the dosdp document command (see below for details).","title":"DOSDP Specification:"},{"location":"overview/#setup","text":"pip install dosdp See https://pypi.org/project/dosdp/","title":"Setup"},{"location":"overview/#validator-spec","text":"See validator documentation","title":"Validator spec"},{"location":"overview/#documentation-generation-spec","text":"See documentation_generation","title":"Documentation generation spec"},{"location":"overview/#implementation","text":"The aim of this project is to specify a simple design pattern system that can easily be consumed, whatever your code base. This repository includes a simple Python validator (src/simple_pattern_tester.py). For implementation, we recommend dosdp-tools .","title":"Implementation"},{"location":"overview/#uses","text":"ENVO : envo patterns/ OBA : oba patterns/ draft environmental conditions ontology: ecto patterns/ Uberon : uberon patterns/ uPheno Mondo","title":"Uses"},{"location":"validator/","text":"DOSDP Validator DOSDP provides a validation interface for both CLI and Python. From the CLI $ dosdp validate -i <test.yaml or 'test folder'> From Python from dosdp import validator validator.validate(\"test.yaml\") DOSDP validates given argument if it is a yaml/yml file. If argument is a folder, validates all pattern files located in the given directory. Validation Steps Test converstion of YAML to JSON Validate against JSON schema (e.g. see dosdp_schema.md and dosdp_schema.yaml ) Test that all var names in printf statements are valid (declared) for the pattern Checks quoted names in the printf_owl field correspond to dictionary entries in the pattern.","title":"Validation"},{"location":"validator/#dosdp-validator","text":"DOSDP provides a validation interface for both CLI and Python.","title":"DOSDP Validator"},{"location":"validator/#from-the-cli","text":"$ dosdp validate -i <test.yaml or 'test folder'>","title":"From the CLI"},{"location":"validator/#from-python","text":"from dosdp import validator validator.validate(\"test.yaml\") DOSDP validates given argument if it is a yaml/yml file. If argument is a folder, validates all pattern files located in the given directory.","title":"From Python"},{"location":"validator/#validation-steps","text":"Test converstion of YAML to JSON Validate against JSON schema (e.g. see dosdp_schema.md and dosdp_schema.yaml ) Test that all var names in printf statements are valid (declared) for the pattern Checks quoted names in the printf_owl field correspond to dictionary entries in the pattern.","title":"Validation Steps"}]}